name: Auto Update PocketBase

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "coollabsio/pocketbase"

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.check.outputs.new_version }}
      has_update: ${{ steps.check.outputs.has_update }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new PocketBase release
        id: check
        run: |
          # Get latest PocketBase release version
          LATEST_VERSION=$(curl -s https://api.github.com/repos/pocketbase/pocketbase/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          echo "Latest PocketBase version: $LATEST_VERSION"
          
          # Get current version from Dockerfile
          CURRENT_VERSION=$(grep 'ARG PB_VERSION=' Dockerfile | cut -d'=' -f2)
          echo "Current version in Dockerfile: $CURRENT_VERSION"
          
          # Compare versions
          if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
            echo "New version available: $LATEST_VERSION"
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "has_update=true" >> $GITHUB_OUTPUT
          else
            echo "Already up to date"
            echo "has_update=false" >> $GITHUB_OUTPUT
          fi

  update-and-build:
    needs: check-version
    if: needs.check-version.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Dockerfile
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.new_version }}"
          sed -i "s/ARG PB_VERSION=.*/ARG PB_VERSION=$NEW_VERSION/" Dockerfile
          
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add Dockerfile
          git commit -m "chore: update PocketBase to v${{ needs.check-version.outputs.new_version }}"
          git tag "v${{ needs.check-version.outputs.new_version }}"
          git push origin main
          git push origin "v${{ needs.check-version.outputs.new_version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new_version }}
          release_name: Release v${{ needs.check-version.outputs.new_version }}
          body: |
            Auto-updated to PocketBase v${{ needs.check-version.outputs.new_version }}
            
            See upstream changes: https://github.com/pocketbase/pocketbase/releases/tag/v${{ needs.check-version.outputs.new_version }}
          draft: false
          prerelease: false

  build-amd64:
    needs: [check-version, update-and-build]
    if: needs.check-version.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: v${{ needs.check-version.outputs.new_version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push AMD64
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          push: true
          build-args: |
            BUILDARCH=amd64
            PB_VERSION=${{ needs.check-version.outputs.new_version }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-version.outputs.new_version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  build-aarch64:
    needs: [check-version, update-and-build]
    if: needs.check-version.outputs.has_update == 'true'
    runs-on:
      group: aarch-runners
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: v${{ needs.check-version.outputs.new_version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/arm64
          push: true
          build-args: |
            BUILDARCH=arm64
            PB_VERSION=${{ needs.check-version.outputs.new_version }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-version.outputs.new_version }}-aarch64
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-aarch64

  merge-manifest:
    needs: [check-version, build-amd64, build-aarch64]
    if: needs.check-version.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create & publish manifest
        run: |
          VERSION="${{ needs.check-version.outputs.new_version }}"
          docker buildx imagetools create --append \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}-aarch64 \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}
          docker buildx imagetools create --append \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-aarch64 \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
